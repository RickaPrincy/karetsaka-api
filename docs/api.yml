openapi: '3.0.2'
info:
  title: Karetsaka API
  version: '1.0'

servers:
  - url: https://app.karetsaka.com/api/v1

security:
  - BearerAuth: [ ]

tags:
  - name: Security
  - name: Users
  - name: Cars
  - name: Images
  - name: Appointments

paths:
  /whoami:
    get:
      tags:
        - Security
      summary: Who am I? Tells you who you are.
      operationId: whoami
      responses:
        '200':
          description: Who you are
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /ping:
    get:
      tags:
        - Security
      summary: pong
      operationId: ping
      responses:
        '200':
          description: pong
          content:
            text/plain:
              schema:
                type: string
                example: pong

# ----------------- Users ------------------
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      operationId: getUsers
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        403:
          description: FORBIDDEN
        500:
          description: SERVER ERROR

    put:
      tags:
        - Users
      summary: Create or Update users
      operationId: createUpdateUsers
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateUser'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: NOT FOUND
        500:
          description: SERVER ERROR

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by id
      operationId: getUserById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: NOT FOUND
        500:
          description: SERVER ERROR



# ------------------ Cars ------------------
  /cars:
    get:
      tags:
        - Cars
      summary: Get all cars
      operationId: getCars
      parameters:
        - in: query
          name: brand
          required: false
          schema:
            type: string
        - in: query
          name: model
          required: false
          schema:
            type: string
        - in: query
          name: type
          required: false
          schema:
            type: string
        - in: query
          name: motorType
          required: false
          schema:
            type: string
        - in: query
          name: price
          required: false
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
        403:
          description: FORBIDDEN
        500:
          description: SERVER ERROR

    put:
      tags:
        - Cars
      summary: Create or Update cars
      operationId: createUpdateCars
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Car'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
        403:
          description: FORBIDDEN
        500:
          description: SERVER ERROR

  /cars/{id}:
    get:
      tags:
        - Cars
      summary: Get car by id
      operationId: getCarById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
        403:
          description: FORBIDDEN
        500:
          description: SERVER ERROR


# ----------------- Images -----------------
  /images:
    get:
      tags:
        - Images
      summary: Get all iamges
      operationId: getImages
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Image'
        403:
          description: FORBIDDEN
        500:
          description: SERVER ERROR

    put:
      tags:
        - Images
      summary: Create or Update image (Attaching image to Car)
      operationId: createUpdateImages
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Image'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Image'
        403:
          description: FORBIDDEN
        500:
          description: SERVER ERROR

  /images/{id}:
    get:
      tags:
        - Images
      summary: Get image by id
      operationId: getImageById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Image'
        403:
          description: FORBIDDEN
        500:
          description: SERVER ERROR


# -------------- Appointment ---------------
  /appointments:
    get:
      tags:
        - Appointments
      summary: Get all appointments
      operationId: getAppointments
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'
        403:
          description: FORBIDDEN
        500:
          description: SERVER ERROR

    put:
      tags:
        - Appointments
      summary: Create or Update appointment by id (Update Status)
      operationId: createUpdateAppointments
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Appointment'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'
        403:
          description: FORBIDDEN
        500:
          description: SERVER ERROR

  /appointments/{id}:
    get:
      tags:
        - Appointments
      summary: Get appointment by id
      operationId: getAppointmentById
      parameters:
        - in: path
          name: emailAdmin
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'
        403:
          description: FORBIDDEN
        500:
          description: SERVER ERROR


components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      
  schemas:
    CreateUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
        password:
          type: string
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string

    CreateCar:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        brand:
          type: string
        model:
          type: string
        price:
          type: number
        color:
          type: string
        motorType:
          type: string
        power:
          type: string
        placeNumber:
          type: number
        status:
          type: boolean
        type:
          type: string
    Car:
      type: object
      allOf:
        - properties:
            id:
              type: string
              format: uuid
        - allOf:
          $ref: '#/components/schemas/CreateCar'

    CreateImage:
      type: object
      properties:
        url:
          type: string
          format: link
    Image:
      type: object
      allOf:
        - properties:
            id:
              type: string
              format: uuid
            productId:
              type: string
              format: uuid
        - allOf:
          $ref: '#/components/schemas/CreateImage'

    CreateAppointment:
      type: object
      properties:
        name:
          type: string
        firstName:
          type: string
        email:
          type: string
        message:
          type: string
        contact:
          type: string
        appointmentDate:
          type: string
          format: date
        status:
          type: string
        carId:
          type: string
          format: uuid
    Appointment:
      type: object
      allOf:
        - properties:
            id:
              type: string
              format: uuid
        - allOf:
          $ref: '#/components/schemas/CreateAppointment'